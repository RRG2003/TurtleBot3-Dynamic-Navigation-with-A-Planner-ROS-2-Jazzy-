# Nav2 parameters tuned for TurtleBot3 Burger in Gazebo (ROS 2 Jazzy)

# Root namespace for all nav2 nodes
/**:
  ros__parameters:
    use_sim_time: True   # use Gazebo simulation clock

# ---------------------------
# AMCL (localization)
# ---------------------------
amcl:
  ros__parameters:
    use_sim_time: True
    alpha1: 0.2
    alpha2: 0.2
    alpha3: 0.2
    alpha4: 0.2
    alpha5: 0.2
    base_frame_id: "base_footprint"
    odom_frame_id: "odom"
    global_frame_id: "map"
    scan_topic: "scan"
    min_particles: 500
    max_particles: 2000
    update_min_a: 0.2
    update_min_d: 0.25
    resample_interval: 1
    transform_tolerance: 1.0

# ---------------------------
# Planner (global planner)
# ---------------------------
#planner_server:
#  ros__parameters:
#    expected_planner_frequency: 10.0
#    use_sim_time: True
#    planner_plugins: ["GridBased"]
#
#    GridBased:
#      plugin: "nav2_navfn_planner/NavfnPlanner"
#      tolerance: 0.5
#      use_astar: False
#     allow_unknown: True

# planner_server:
#   ros__parameters:
#     expected_planner_frequency: 10.0
#     use_sim_time: True
#     planner_plugins: ["AStar"]

#     AStar:
#       plugin: "tb3_astar_planner::AStarPlanner"

planner_server:
  ros__parameters:
    planner_plugins: ["GridBased"]
    GridBased:
      plugin: "tb3_astar_planner/AstarPlanner"


# ---------------------------
# Controller (local planner)
# ---------------------------
controller_server:
  ros__parameters:
    use_sim_time: True
    controller_frequency: 20.0
    min_x_velocity_threshold: 0.001
    min_theta_velocity_threshold: 0.001
    progress_checker_plugin: "progress_checker"
    goal_checker_plugins: ["general_goal_checker"]
    controller_plugins: ["FollowPath"]

    # Progress checker
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.5
      movement_time_allowance: 10.0

    # Goal checker
    general_goal_checker:
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.25
      yaw_goal_tolerance: 0.25
      stateful: True

    # DWB Local Planner
    FollowPath:
      plugin: "dwb_core::DWBLocalPlanner"
      min_vel_x: 0.0
      max_vel_x: 0.26
      max_vel_theta: 1.82
      min_vel_theta: -1.82
      acc_lim_x: 2.5
      acc_lim_theta: 3.2
      decel_lim_x: -2.5
      decel_lim_theta: -3.2
      vx_samples: 20
      vtheta_samples: 40
      sim_time: 2.0
      linear_granularity: 0.05
      angular_granularity: 0.025
      transform_tolerance: 0.2
      xy_goal_tolerance: 0.25
      yaw_goal_tolerance: 0.25

# ---------------------------
# Behavior Tree Navigator
# ---------------------------
bt_navigator:
  ros__parameters:
    use_sim_time: True
    default_bt_xml_filename: "navigate_w_replanning_and_recovery.xml"
    plugin_lib_names: ["nav2_compute_path_to_pose_action_bt_node",
                       "nav2_follow_path_action_bt_node",
                       "nav2_spin_action_bt_node",
                       "nav2_wait_action_bt_node",
                       "nav2_clear_costmap_service_bt_node",
                       "nav2_is_stuck_condition_bt_node",
                       "nav2_goal_reached_condition_bt_node",
                       "nav2_reinitialize_global_localization_service_bt_node",
                       "nav2_rate_controller_bt_node",
                       "nav2_recovery_node_bt_node",
                       "nav2_pipeline_sequence_bt_node",
                       "nav2_round_robin_node_bt_node",
                       "nav2_transform_available_condition_bt_node",
                       "nav2_time_expired_condition_bt_node",
                       "nav2_distance_traveled_condition_bt_node"]

# ---------------------------
# Map Server
# ---------------------------
map_server:
  ros__parameters:
    use_sim_time: True
    yaml_filename: "maps/map.yaml"   # <- Replace with your map path

map_saver_server:
  ros__parameters:
    use_sim_time: True
    save_map_timeout: 5000
    free_thresh_default: 0.25
    occupied_thresh_default: 0.65
    map_subscribe_transient_local: True

# ---------------------------
# Recoveries
# ---------------------------
recoveries_server:
  ros__parameters:
    use_sim_time: True
    costmap_topic: "local_costmap/costmap_raw"
    footprint_topic: "local_costmap/published_footprint"

# ---------------------------
# Costmaps
# ---------------------------
costmap_common: &costmap_common
  footprint: "[[0.105, 0.105], [0.105, -0.105], [-0.105, -0.105], [-0.105, 0.105]]"
  robot_radius: 0.105
  resolution: 0.05
  transform_tolerance: 0.2
  inflation_layer:
    plugin: "nav2_costmap_2d::InflationLayer"
    cost_scaling_factor: 3.0
    inflation_radius: 0.55
  obstacle_layer:
    plugin: "nav2_costmap_2d::ObstacleLayer"
    observation_sources: "scan"
    scan:
      topic: "scan"
      max_obstacle_height: 2.0
      clearing: True
      marking: True
      data_type: "LaserScan"

global_costmap: &global_costmap
  global_frame: map
  robot_base_frame: base_footprint
  update_frequency: 1.0
  publish_frequency: 1.0
  rolling_window: False
  width: 10
  height: 10
  static_layer:
    plugin: "nav2_costmap_2d::StaticLayer"
  <<: *costmap_common

local_costmap: &local_costmap
  global_frame: odom
  robot_base_frame: base_footprint
  update_frequency: 5.0
  publish_frequency: 2.0
  rolling_window: True
  width: 3
  height: 3
  <<: *costmap_common

costmap:
  global:
    ros__parameters: *global_costmap
  local:
    ros__parameters: *local_costmap

